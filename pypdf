#!/usr/bin/env python3

# pypdf - a command-line tool that is essentially a wrapper for the python
# module, PyPDF2, allowing users to manipulate PDFs from the command-line.

import sys
import os.path
import PyPDF2
import re
from getpass import getpass


def _filesExist(files):
    """Exit if one of the files doesn't exist."""
    for file in files:
        if not os.path.isfile(file):
            sys.exit(f"'{file}' does not exist.")


def merge(new_file, pdfs):
    """Merge pdfs into new pdf file."""

    # Make sure all pdfs exist
    _filesExist(pdfs)

    # Make sure new_file does not already exist
    if os.path.isfile(new_file):
        response = input(f"'{new_file}' exists, overwrite? (y/n) ")
        if response != 'y':
            sys.exit(0)

    # Initialise merge object.
    pdf_merger = PyPDF2.PdfFileMerger()

    # Append files to merge object.
    for file in pdfs:
        try:
            pdf_merger.append(file)
        except PyPDF2.utils.PdfReadError:
            sys.exit(f"'{file}' is not a valid PDF file.")

    # Write the merge object to new pdf file.
    with open(new_file, 'wb') as pdf_output:
        pdf_merger.write(pdf_output)

    print(f"'{new_file}' created.")


def info(pdfs):
    """Extract meta data from given pdfs and print to stdout. Includes:
    title, author, creator, subject, and number of pages."""

    # Make sure all pdf files exist
    _filesExist(pdfs)

    # Get and print meta data for each pdf.
    for file in pdfs:
        with open(file, 'rb') as f:
            try:
                pdf_reader = PyPDF2.PdfFileReader(f)
            except PyPDF2.utils.PdfReadError:
                print(f"'{file}' is not a valid PDF file.\n")
                continue
            info = pdf_reader.getDocumentInfo()
            num_of_pages = pdf_reader.getNumPages()

        # Convert dates to 'DD/MM/YYYY HH:MM:SS'
        created = info['/CreationDate']
        last_modified = info['/ModDate']
        created = (created[8:10] + '/' + created[6:8] + '/' +
                   created[2:6] + ' ' + created[10:12] + ':' +
                   created[12:14] + ':' + created[14:16])
        last_modified = (last_modified[8:10] + '/' + last_modified[6:8] + '/' +
                   last_modified[2:6] + ' ' + last_modified[10:12] + ':' +
                   last_modified[12:14] + ':' + last_modified[14:16])

        print(f"{file}")
        print(f"    Title: {info.title}")
        print(f"    Author: {info.author}")
        print(f"    Creator: {info.creator}")
        print(f"    Subject: {info.subject}")
        print(f"    Number of Pages: {num_of_pages}")
        print(f"    Created: {created}")
        print(f"    Last Modified: {last_modified}\n")


def rotatePages(pdf, pages):
    # TODO: implement PDF page rotation
    pass


def splitPDF(pdf, newfiles):
    # TODO: implement PDF split
    pass


def encrypt(pdfs):

    # Make sure all pdf files exist
    _filesExist(pdfs)

    # Encrypt pdfs
    for file in pdfs:

        # Get password.
        password = getpass(prompt="Enter password: ")
        confirm = getpass(prompt="Confirm password: ")
        while password != confirm:
            print("Passwords do not match.")
            password = getpass(prompt="Enter again: ")
            confirm = getpass(prompt="Confirm: ")

        # Initialise PDF reader object.
        try:
            pdf_reader = PyPDF2.PdfFileReader(file)
        except PyPDF2.utils.PdfReadError:
            print(f"'{file}' is not a valid PDF file.")
            continue

        # Initialise PDF writer object
        pdf_writer = PyPDF2.PdfFileWriter()
        pdf_writer.appendPagesFromReader(pdf_reader)

        # Encrypt PDF (128bit encryption by default)
        pdf_writer.encrypt(password)

        # Generate name for encrypted file
        output = re.sub(r'(.*)(\.pdf)$',
                        r'\1_encrypted\2',
                        file)

        # Generate encrypted file.
        with open(output, 'wb') as f:
            pdf_writer.write(f)

        print(f"'{output}' created.")


if __name__ == '__main__':

    if len(sys.argv) < 3:
        sys.exit(f"Usage: {sys.argv[0]}: <command> <files>")

    elif sys.argv[1] == 'merge' and len(sys.argv[2:]) > 1:
        merge(sys.argv[2], sys.argv[3:])

    elif sys.argv[1] == 'info':
        info(sys.argv[2:])

    elif sys.argv[1] == 'rotate':
        pass

    elif sys.argv[1] == 'split':
        pass

    elif sys.argv[1] == 'encrypt':
        encrypt(sys.argv[2:])

    else:
        sys.exit(f"Usage: {sys.argv[0]}: <command> <files>")
