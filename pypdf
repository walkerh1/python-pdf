#!/usr/bin/env python3

# pypdf - a command-line tool that is essentially a wrapper for the python
# module, PyPDF2, allowing users to manipulate PDFs from the command-line.

import re
import sys
import os.path
import argparse
import PyPDF2
from getpass import getpass


def _filesExist(files):
    """Exit if one of the files doesn't exist."""
    for file in files:
        if not os.path.isfile(file):
            sys.exit(f"'{file}' does not exist.")


def _decrypt(pdf_reader):
    """Prompts user for password until decryption works."""
    password = getpass(prompt="Password: ")
    while not pdf_reader.decrypt(password):
        password = getpass(prompt="Wrong password, try again: ")


def merge(new_file, pdfs):
    """Merge pdfs into new pdf file."""

    # Make sure all pdfs exist
    _filesExist(pdfs)

    # Give option to overwrite new_file if it already exists.
    if os.path.isfile(new_file):
        response = input(f"'{new_file}' already exists, overwrite? (y/n) ")
        if response != 'y':
            sys.exit(0)

    # Initialise merge object.
    pdf_merger = PyPDF2.PdfFileMerger()

    # Append files to merge object.
    for file in pdfs:
        try:
            pdf_merger.append(file)
        except PyPDF2.utils.PdfReadError:
            sys.exit(f"'{file}' is not a valid PDF file.")

    # Write the merge object to new pdf file.
    with open(new_file, 'wb') as pdf_output:
        pdf_merger.write(pdf_output)
    print(f"'{new_file}' created.")


def info(pdfs):
    """Extract meta data from given pdfs and print to stdout. Includes:
    title, author, creator, subject, number of pages, date created, and
    date last modified."""

    # Make sure all pdfs exist
    _filesExist(pdfs)

    # Get and print meta data for each pdf.
    for file in pdfs:
        try:
            pdf_reader = PyPDF2.PdfFileReader(file)
        except PyPDF2.utils.PdfReadError:
            print(f"'{file}' is not a valid PDF file.\n")
            continue

        # Check if pdf is encrypted, and if so decrypt it.
        if pdf_reader.isEncrypted:
            print(f"'{file}' is encrypted.")
            _decrypt(pdf_reader)

        # Extract meta data.
        info = pdf_reader.getDocumentInfo()
        num_of_pages = pdf_reader.getNumPages()

        # Convert dates to 'DD/MM/YYYY HH:MM:SS'
        if '/CreationDate' in info:
            created = info['/CreationDate']
            created = (created[8:10] + '/' + created[6:8] + '/' +
                       created[2:6] + ' ' + created[10:12] + ':' +
                       created[12:14] + ':' + created[14:16])
        else:
            created = None

        if '/ModDate' in info:
            last_modified = info['/ModDate']
            last_modified = (last_modified[8:10] + '/' + last_modified[6:8] + '/' +
                   last_modified[2:6] + ' ' + last_modified[10:12] + ':' +
                   last_modified[12:14] + ':' + last_modified[14:16])
        else:
            last_modified = None

        print(f"{file}")
        print(f"    Title: {info.title}")
        print(f"    Author: {info.author}")
        print(f"    Creator: {info.creator}")
        print(f"    Subject: {info.subject}")
        print(f"    Number of Pages: {num_of_pages}")
        print(f"    Created: {created}")
        print(f"    Last Modified: {last_modified}\n")


def rotatePages(pdf, pages=None):
    """Takes one pdf and an optional page range and rotates those
    pages 90 degrees clockwise."""

    # Initialise pdf reader object
    try:
        pdf_reader = PyPDF2.PdfFileReader(pdf)
    except PyPDF2.utils.PdfReadError:
        print(f"'{pdf}' is not a valid PDF file.\n")

    # Check if pdf is encrypted, and if so decrypt it.
    if pdf_reader.isEncrypted:
        print(f"'{pdf}' is encrypted.")
        _decrypt(pdf_reader)

    # Initialise pdf writer object
    pdf_writer = PyPDF2.PdfFileWriter()

    # Rotate pages 90 degrees clockwise
    for i in range(pdf_reader.getNumPages()):
        page = pdf_reader.getPage(i).rotateClockwise(90)
        pdf_writer.addPage(page)

    # Overwrite pdf with new rotated pdf
    with open(pdf, 'wb') as f:
        pdf_writer.write(f)


def split(pdf, split_page):
    """Takes one pdf and a single page number, and splits into two
    pdfs on that page number."""

    # Check pdf exists.
    _filesExist([pdf])

    # Initialise pdf reader object.
    try:
        pdf_reader = PyPDF2.PdfFileReader(pdf)
    except PyPDF2.utils.PdfReadError:
        sys.exit(f"'{pdf}' is not a valid PDF file.\n")

    # Check if pdf is encrypted, and if so decrypt it.
    if pdf_reader.isEncrypted:
        print(f"'{pdf}' is encrypted.")
        _decrypt(pdf_reader)

    # Check page argument is valid.
    num_pages = pdf_reader.getNumPages()
    if split_page >= num_pages or split_page < 0:
        sys.exit("Page number specified out of range")

    # Create two pdf writers
    page = 0
    first = PyPDF2.PdfFileWriter()
    while page < split_page:
        first.addPage(pdf_reader.getPage(page))
        page += 1

    second = PyPDF2.PdfFileWriter()
    while page < num_pages:
        second.addPage(pdf_reader.getPage(page))
        page += 1

    # Create new pdf names
    first_part = re.sub(r'(.*)(\.pdf)$', r'\1_first_part\2', pdf)
    second_part = re.sub(r'(.*)(\.pdf)$', r'\1_second_part\2', pdf)

    # Create new pdfs
    with open(first_part, 'wb') as out:
        first.write(out)
    print(f"'{first_part}' created.")

    with open(second_part, 'wb') as out:
        second.write(out)
    print(f"'{second_part}' created.")


def encrypt(pdfs):
    """Create encrypted versions of the given pdfs"""

    # Make sure all pdfs exist
    _filesExist(pdfs)

    # Encrypt pdfs, one at a time
    for file in pdfs:

        # Initialise pdf reader object.
        try:
            pdf_reader = PyPDF2.PdfFileReader(file)
        except PyPDF2.utils.PdfReadError:
            print(f"'{file}' is not a valid PDF file.")
            continue

        # Cannot encrypt an already encrypted pdf.
        if pdf_reader.isEncrypted:
            print(f"'{file}' is already encrypted.")
            continue

        # Set password.
        password = getpass(prompt="Enter new password: ")
        confirm = getpass(prompt="Confirm new password: ")
        while password != confirm:
            print("Passwords do not match.")
            password = getpass(prompt="Enter again: ")
            confirm = getpass(prompt="Confirm: ")

        # Initialise pdf writer object
        pdf_writer = PyPDF2.PdfFileWriter()
        pdf_writer.appendPagesFromReader(pdf_reader)

        # Encrypt PDF (128bit encryption by default)
        pdf_writer.encrypt(password)

        # Generate name for encrypted pdf
        output = re.sub(r'(.*)(\.pdf)$', r'\1_encrypted\2', file)

        # Generate encrypted pdf.
        with open(output, 'wb') as f:
            pdf_writer.write(f)
        print(f"'{output}' created.")


if __name__ == '__main__':

    if len(sys.argv) < 3:
        sys.exit(f"Usage: {sys.argv[0]}: <command> <files>")

    elif sys.argv[1] == 'merge' and len(sys.argv[2:]) > 1:
        merge(sys.argv[2], sys.argv[3:])

    elif sys.argv[1] == 'info':
        info(sys.argv[2:])

    elif sys.argv[1] == 'rotate':
        rotatePages(sys.argv[2])

    elif sys.argv[1] == 'split' and len(sys.argv[2:]) > 1:
        try:
            page = int(sys.argv[3])
        except ValueError:
            print(f"Usage: {sys.argv[0]} split <pdf> <int>")
        else:
            split(sys.argv[2], page)

    elif sys.argv[1] == 'encrypt':
        encrypt(sys.argv[2:])

    else:
        sys.exit(f"Usage: {sys.argv[0]}: <command> <files>")
